{"ast":null,"code":"var _jsxFileName = \"/home/user/Desktop/test-task-25-06-21/src/components/Modal/Modal.jsx\",\n    _s = $RefreshSig$();\n\n/* eslint-disable no-console */\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { getBigPhoto } from '../../api/photos';\nimport { getComments, addComment } from '../../api/comments';\nimport './Modal.scss'; // eslint-disable-next-line import/order\n\nimport { connect } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Modal = ({\n  isModalActive,\n  setIsModalActive,\n  selectedImage\n}) => {\n  _s();\n\n  const [bigPhoto, setBigPhoto] = useState('');\n  const [comments, setComments] = useState([]);\n  const [userName, setUserName] = useState('');\n  const [newComment, setNewComment] = useState('');\n  const [errorName, setErrorName] = useState(false);\n  const [errorComment, setErrorComment] = useState(false);\n\n  const updateComments = async () => {\n    const postComments = await getComments(selectedImage);\n\n    if (postComments.detail) {\n      setComments([]);\n    } else {\n      setComments(postComments);\n    }\n  };\n\n  useEffect(() => {\n    if (!selectedImage) {\n      return;\n    } // isModalActive\n    //    document.body.style.overflow = 'hidden';\n    //  }\n    //\n    //  if (!isModalActive) {\n    //    document.body.style.overflow = 'visible';\n    //  }\n\n\n    getBigPhoto(selectedImage).then(photo => {\n      setBigPhoto(photo);\n    });\n    updateComments();\n  }, [isModalActive, selectedImage, setBigPhoto]);\n\n  const handleChange = event => {\n    const {\n      name,\n      value\n    } = event.target;\n\n    if (name === 'name') {\n      setUserName(value);\n    } else if (name === 'comment') {\n      setNewComment(value);\n    }\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n\n    if (!userName) {\n      setErrorName(true);\n    }\n\n    if (!newComment) {\n      setErrorComment(true);\n    }\n\n    if (userName && newComment) {\n      addComment(userName, newComment, selectedImage);\n      updateComments();\n      setUserName('');\n      setNewComment('');\n      setErrorName(false);\n      setErrorComment(false);\n    }\n  };\n\n  const handleClose = () => {\n    setIsModalActive(!isModalActive);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: isModalActive && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal__container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal__info\",\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            className: \"modal__photo\",\n            src: bigPhoto.url,\n            alt: \"nature\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            className: \"modal__form\",\n            onSubmit: handleSubmit,\n            children: [/*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"name\",\n              className: \"modal__label\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"modal__input\",\n                type: \"text\",\n                id: \"name\",\n                name: \"name\",\n                value: userName,\n                placeholder: \"\\u0412\\u0430\\u0448\\u0435 \\u0438\\u043C\\u044F\",\n                onChange: handleChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 97,\n                columnNumber: 19\n              }, this), errorName && /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"modal__error\",\n                children: \"Empty field\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 107,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"comment\",\n              className: \"modal__label\",\n              children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                className: \"modal__input\",\n                type: \"text\",\n                id: \"comment\",\n                name: \"comment\",\n                value: newComment,\n                placeholder: \"\\u0412\\u0430\\u0448 \\u043A\\u043E\\u043C\\u043C\\u0435\\u0442\\u0430\\u0440\\u0438\\u0439\",\n                onChange: handleChange\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 111,\n                columnNumber: 19\n              }, this), errorComment && /*#__PURE__*/_jsxDEV(\"p\", {\n                className: \"modal__error\",\n                children: \"Empty field\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 121,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"modal__button\",\n              type: \"submit\",\n              children: \"\\u041E\\u0441\\u0442\\u0430\\u0432\\u0438\\u0442\\u044C \\u043A\\u043E\\u043C\\u043C\\u0435\\u043D\\u0442\\u0430\\u0440\\u0438\\u0439\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this), comments && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal__comments\",\n          children: comments.map(comment => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal__comment\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"modal__name\",\n              children: comment.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 134,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"modal__text\",\n              children: comment.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 137,\n              columnNumber: 21\n            }, this)]\n          }, comment.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 19\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"modal__close\",\n          type: \"button\",\n          onClick: handleClose,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal__line-right\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal__line-left\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n};\n\n_s(Modal, \"vZa1CUQ91N4xHwHF9pryOnmPugU=\");\n\n_c = Modal;\n\nconst mapStateToProps = state => ({\n  selectedImage: state.selectedImage\n});\n\nexport default connect(mapStateToProps)(Modal);\nModal.propTypes = {\n  isModalActive: PropTypes.bool.isRequired,\n  setIsModalActive: PropTypes.func.isRequired,\n  selectedImage: PropTypes.number.isRequired\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"Modal\");","map":{"version":3,"sources":["/home/user/Desktop/test-task-25-06-21/src/components/Modal/Modal.jsx"],"names":["React","useEffect","useState","PropTypes","getBigPhoto","getComments","addComment","connect","Modal","isModalActive","setIsModalActive","selectedImage","bigPhoto","setBigPhoto","comments","setComments","userName","setUserName","newComment","setNewComment","errorName","setErrorName","errorComment","setErrorComment","updateComments","postComments","detail","then","photo","handleChange","event","name","value","target","handleSubmit","preventDefault","handleClose","url","map","comment","description","id","mapStateToProps","state","propTypes","bool","isRequired","func","number"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,SAASC,WAAT,EAAsBC,UAAtB,QAAwC,oBAAxC;AACA,OAAO,cAAP,C,CACA;;AACA,SAASC,OAAT,QAAwB,aAAxB;;;;AAEA,MAAMC,KAAK,GAAG,CAAC;AAAEC,EAAAA,aAAF;AAAiBC,EAAAA,gBAAjB;AAAmCC,EAAAA;AAAnC,CAAD,KAAwD;AAAA;;AACpE,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BX,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACY,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACc,QAAD,EAAWC,WAAX,IAA0Bf,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACgB,UAAD,EAAaC,aAAb,IAA8BjB,QAAQ,CAAC,EAAD,CAA5C;AACA,QAAM,CAACkB,SAAD,EAAYC,YAAZ,IAA4BnB,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACoB,YAAD,EAAeC,eAAf,IAAkCrB,QAAQ,CAAC,KAAD,CAAhD;;AAEA,QAAMsB,cAAc,GAAG,YAAW;AAChC,UAAMC,YAAY,GAAG,MAAMpB,WAAW,CAACM,aAAD,CAAtC;;AAEA,QAAIc,YAAY,CAACC,MAAjB,EAAyB;AACvBX,MAAAA,WAAW,CAAC,EAAD,CAAX;AACD,KAFD,MAEO;AACLA,MAAAA,WAAW,CAACU,YAAD,CAAX;AACD;AACF,GARD;;AAUAxB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACU,aAAL,EAAoB;AAClB;AACD,KAHa,CAKf;AACA;AACA;AACA;AACA;AACA;AACA;;;AAECP,IAAAA,WAAW,CAACO,aAAD,CAAX,CACGgB,IADH,CACSC,KAAD,IAAW;AACff,MAAAA,WAAW,CAACe,KAAD,CAAX;AACD,KAHH;AAKAJ,IAAAA,cAAc;AACf,GAnBQ,EAmBN,CAACf,aAAD,EAAgBE,aAAhB,EAA+BE,WAA/B,CAnBM,CAAT;;AAqBA,QAAMgB,YAAY,GAAIC,KAAD,IAAW;AAC9B,UAAM;AAAEC,MAAAA,IAAF;AAAQC,MAAAA;AAAR,QAAkBF,KAAK,CAACG,MAA9B;;AAEA,QAAIF,IAAI,KAAK,MAAb,EAAqB;AACnBd,MAAAA,WAAW,CAACe,KAAD,CAAX;AACD,KAFD,MAEO,IAAID,IAAI,KAAK,SAAb,EAAwB;AAC7BZ,MAAAA,aAAa,CAACa,KAAD,CAAb;AACD;AACF,GARD;;AAUA,QAAME,YAAY,GAAIJ,KAAD,IAAW;AAC9BA,IAAAA,KAAK,CAACK,cAAN;;AAEA,QAAI,CAACnB,QAAL,EAAe;AACbK,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACD;;AAED,QAAI,CAACH,UAAL,EAAiB;AACfK,MAAAA,eAAe,CAAC,IAAD,CAAf;AACD;;AAED,QAAIP,QAAQ,IAAIE,UAAhB,EAA4B;AAC1BZ,MAAAA,UAAU,CAACU,QAAD,EAAWE,UAAX,EAAuBP,aAAvB,CAAV;AACAa,MAAAA,cAAc;AACdP,MAAAA,WAAW,CAAC,EAAD,CAAX;AACAE,MAAAA,aAAa,CAAC,EAAD,CAAb;AACAE,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,MAAAA,eAAe,CAAC,KAAD,CAAf;AACD;AACF,GAnBD;;AAqBA,QAAMa,WAAW,GAAG,MAAM;AACxB1B,IAAAA,gBAAgB,CAAC,CAACD,aAAF,CAAhB;AACD,GAFD;;AAIA,sBACE;AAAA,cACGA,aAAa,iBACZ;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA,gCACE;AAAK,UAAA,SAAS,EAAC,aAAf;AAAA,kCACE;AACE,YAAA,SAAS,EAAC,cADZ;AAEE,YAAA,GAAG,EAAEG,QAAQ,CAACyB,GAFhB;AAGE,YAAA,GAAG,EAAC;AAHN;AAAA;AAAA;AAAA;AAAA,kBADF,eAME;AAAM,YAAA,SAAS,EAAC,aAAhB;AAA8B,YAAA,QAAQ,EAAEH,YAAxC;AAAA,oCACE;AAAO,cAAA,OAAO,EAAC,MAAf;AAAsB,cAAA,SAAS,EAAC,cAAhC;AAAA,sCACE;AACE,gBAAA,SAAS,EAAC,cADZ;AAEE,gBAAA,IAAI,EAAC,MAFP;AAGE,gBAAA,EAAE,EAAC,MAHL;AAIE,gBAAA,IAAI,EAAC,MAJP;AAKE,gBAAA,KAAK,EAAElB,QALT;AAME,gBAAA,WAAW,EAAC,6CANd;AAOE,gBAAA,QAAQ,EAAEa;AAPZ;AAAA;AAAA;AAAA;AAAA,sBADF,EAUGT,SAAS,iBACR;AAAG,gBAAA,SAAS,EAAC,cAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAXJ;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,eAeE;AAAO,cAAA,OAAO,EAAC,SAAf;AAAyB,cAAA,SAAS,EAAC,cAAnC;AAAA,sCACE;AACE,gBAAA,SAAS,EAAC,cADZ;AAEE,gBAAA,IAAI,EAAC,MAFP;AAGE,gBAAA,EAAE,EAAC,SAHL;AAIE,gBAAA,IAAI,EAAC,SAJP;AAKE,gBAAA,KAAK,EAAEF,UALT;AAME,gBAAA,WAAW,EAAC,iFANd;AAOE,gBAAA,QAAQ,EAAEW;AAPZ;AAAA;AAAA;AAAA;AAAA,sBADF,EAUGP,YAAY,iBACX;AAAG,gBAAA,SAAS,EAAC,cAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAXJ;AAAA;AAAA;AAAA;AAAA;AAAA,oBAfF,eA6BE;AAAQ,cAAA,SAAS,EAAC,eAAlB;AAAkC,cAAA,IAAI,EAAC,QAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBA7BF;AAAA;AAAA;AAAA;AAAA;AAAA,kBANF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,EA0CGR,QAAQ,iBACP;AAAK,UAAA,SAAS,EAAC,iBAAf;AAAA,oBACGA,QAAQ,CAACwB,GAAT,CAAaC,OAAO,iBACnB;AAAsB,YAAA,SAAS,EAAC,gBAAhC;AAAA,oCACE;AAAG,cAAA,SAAS,EAAC,aAAb;AAAA,wBACGA,OAAO,CAACR;AADX;AAAA;AAAA;AAAA;AAAA,oBADF,eAIE;AAAG,cAAA,SAAS,EAAC,aAAb;AAAA,wBACGQ,OAAO,CAACC;AADX;AAAA;AAAA;AAAA;AAAA,oBAJF;AAAA,aAAUD,OAAO,CAACE,EAAlB;AAAA;AAAA;AAAA;AAAA,kBADD;AADH;AAAA;AAAA;AAAA;AAAA,gBA3CJ,eAyDE;AACE,UAAA,SAAS,EAAC,cADZ;AAEE,UAAA,IAAI,EAAC,QAFP;AAGE,UAAA,OAAO,EAAEL,WAHX;AAAA,kCAKE;AAAK,YAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,kBALF,eAME;AAAK,YAAA,SAAS,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,kBANF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAzDF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AAFJ,mBADF;AA0ED,CApJD;;GAAM5B,K;;KAAAA,K;;AAsJN,MAAMkC,eAAe,GAAGC,KAAK,KAAK;AAChChC,EAAAA,aAAa,EAAEgC,KAAK,CAAChC;AADW,CAAL,CAA7B;;AAIA,eAAeJ,OAAO,CAACmC,eAAD,CAAP,CAAyBlC,KAAzB,CAAf;AAEAA,KAAK,CAACoC,SAAN,GAAkB;AAChBnC,EAAAA,aAAa,EAAEN,SAAS,CAAC0C,IAAV,CAAeC,UADd;AAEhBpC,EAAAA,gBAAgB,EAAEP,SAAS,CAAC4C,IAAV,CAAeD,UAFjB;AAGhBnC,EAAAA,aAAa,EAAER,SAAS,CAAC6C,MAAV,CAAiBF;AAHhB,CAAlB","sourcesContent":["/* eslint-disable no-console */\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { getBigPhoto } from '../../api/photos';\nimport { getComments, addComment } from '../../api/comments';\nimport './Modal.scss';\n// eslint-disable-next-line import/order\nimport { connect } from 'react-redux';\n\nconst Modal = ({ isModalActive, setIsModalActive, selectedImage }) => {\n  const [bigPhoto, setBigPhoto] = useState('');\n  const [comments, setComments] = useState([]);\n  const [userName, setUserName] = useState('');\n  const [newComment, setNewComment] = useState('');\n  const [errorName, setErrorName] = useState(false);\n  const [errorComment, setErrorComment] = useState(false);\n\n  const updateComments = async() => {\n    const postComments = await getComments(selectedImage);\n\n    if (postComments.detail) {\n      setComments([]);\n    } else {\n      setComments(postComments);\n    }\n  };\n\n  useEffect(() => {\n    if (!selectedImage) {\n      return;\n    }\n\n   // isModalActive\n   //    document.body.style.overflow = 'hidden';\n   //  }\n   //\n   //  if (!isModalActive) {\n   //    document.body.style.overflow = 'visible';\n   //  }\n\n    getBigPhoto(selectedImage)\n      .then((photo) => {\n        setBigPhoto(photo);\n      });\n\n    updateComments();\n  }, [isModalActive, selectedImage, setBigPhoto]);\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n\n    if (name === 'name') {\n      setUserName(value);\n    } else if (name === 'comment') {\n      setNewComment(value);\n    }\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    if (!userName) {\n      setErrorName(true);\n    }\n\n    if (!newComment) {\n      setErrorComment(true);\n    }\n\n    if (userName && newComment) {\n      addComment(userName, newComment, selectedImage);\n      updateComments();\n      setUserName('');\n      setNewComment('');\n      setErrorName(false);\n      setErrorComment(false);\n    }\n  };\n\n  const handleClose = () => {\n    setIsModalActive(!isModalActive);\n  };\n\n  return (\n    <>\n      {isModalActive && (\n        <div className=\"modal\">\n          <div className=\"modal__container\">\n            <div className=\"modal__info\">\n              <img\n                className=\"modal__photo\"\n                src={bigPhoto.url}\n                alt=\"nature\"\n              />\n              <form className=\"modal__form\" onSubmit={handleSubmit}>\n                <label htmlFor=\"name\" className=\"modal__label\">\n                  <input\n                    className=\"modal__input\"\n                    type=\"text\"\n                    id=\"name\"\n                    name=\"name\"\n                    value={userName}\n                    placeholder=\"Ваше имя\"\n                    onChange={handleChange}\n                  />\n                  {errorName && (\n                    <p className=\"modal__error\">Empty field</p>\n                  )}\n                </label>\n                <label htmlFor=\"comment\" className=\"modal__label\">\n                  <input\n                    className=\"modal__input\"\n                    type=\"text\"\n                    id=\"comment\"\n                    name=\"comment\"\n                    value={newComment}\n                    placeholder=\"Ваш комметарий\"\n                    onChange={handleChange}\n                  />\n                  {errorComment && (\n                    <p className=\"modal__error\">Empty field</p>\n                  )}\n                </label>\n                <button className=\"modal__button\" type=\"submit\">\n                  Оставить комментарий\n                </button>\n              </form>\n            </div>\n\n            {comments && (\n              <div className=\"modal__comments\">\n                {comments.map(comment => (\n                  <div key={comment.id} className=\"modal__comment\">\n                    <p className=\"modal__name\">\n                      {comment.name}\n                    </p>\n                    <p className=\"modal__text\">\n                      {comment.description}\n                    </p>\n                  </div>\n                ))}\n              </div>\n            )}\n\n            <button\n              className=\"modal__close\"\n              type=\"button\"\n              onClick={handleClose}\n            >\n              <div className=\"modal__line-right\" />\n              <div className=\"modal__line-left\" />\n            </button>\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n\nconst mapStateToProps = state => ({\n  selectedImage: state.selectedImage,\n});\n\nexport default connect(mapStateToProps)(Modal);\n\nModal.propTypes = {\n  isModalActive: PropTypes.bool.isRequired,\n  setIsModalActive: PropTypes.func.isRequired,\n  selectedImage: PropTypes.number.isRequired,\n};\n"]},"metadata":{},"sourceType":"module"}